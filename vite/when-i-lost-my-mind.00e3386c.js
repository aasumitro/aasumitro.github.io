import{o as n,c as s,a}from"./index.a16ebd86.js";const t={class:"markdown-body"},p=[a('<h1>Hello world</h1><p>this is example stories i wrote this for examples</p><h4>this is next title</h4><p><code>this is the code</code></p><pre><code>    this is full qouted code\n</code></pre><p>SyntaxHighlighter by highlight.js:</p><pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">$initHighlight</span><span class="token punctuation">(</span><span class="token parameter">block<span class="token punctuation">,</span> cls</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">try</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>cls<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\bno\\-highlight\\b</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>\n      <span class="token keyword">return</span> <span class="token function">process</span><span class="token punctuation">(</span>block<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">0x0F</span><span class="token punctuation">)</span> <span class="token operator">+</span>\n             <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> class=&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>cls<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">/* handle exception */</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> classes<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">checkCondition</span><span class="token punctuation">(</span>classes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;undefined&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><pre class="language-php"><code class="language-php"><span class="token keyword">function</span> <span class="token function-definition function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">String</span> <span class="token punctuation">{</span>\n  <span class="token variable">$hello</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;asd qwe&quot;</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token variable">$hello</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><pre class="language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  hello <span class="token operator">:=</span> <span class="token string">&quot;asd qwe&quot;</span>\n  <span class="token keyword">return</span> hello\n<span class="token punctuation">}</span>\n</code></pre><h3>Solar System Exploration, 1950s â€“ 1960s</h3><ul><li>[ ] Mercury</li><li>[x] Venus</li><li>[x] Earth (Orbit/Moon)</li><li>[x] Mars</li><li>[ ] Jupiter</li><li>[ ] Saturn</li><li>[ ] Uranus</li><li>[ ] Neptune</li><li>[ ] Comet Haley</li></ul><h2>test link</h2><p><a href="https://aasumitro.id">aasumitro.id</a></p>',13)];const o={},e={render:function(a,o){return n(),s("div",t,p)},data:()=>({frontmatter:o})};export{e as default};
